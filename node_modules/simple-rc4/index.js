/*jslint node: true, bitwise: true*/
'use strict';

var stream = require('stream');
var util = require('util');

function RC4(key) {
    var box = new Buffer(0x100);

    if (!(key instanceof Buffer)) {
        key = new Buffer(key);
    }
    var keylen = key.length, k, l = 0, s;
    for (k = 0; k < 0x100; k += 1) {
        box[k] = k;
    }
    // swap box using key
    for (k = 0; k < 0x100; k += 1) {
        l = (l + box[k] + key[k % keylen]) % 0x100;
        // swap box[k] and box[l]
        s = box[k];
        box[k] = box[l];
        box[l] = s;
    }

    this._box = box;
    this._i = 0;
    this._j = 0;
}

RC4.prototype.update = function (msg) {
    var msglen = msg.length, i, j, k, s, box = this._box;
    if (!(msg instanceof Buffer)) {
        msg = new Buffer(msg);
    }
    for (k = 0; k < msglen; k += 1) {
        i = (this._i + 1) % 0x100;
        j = (this._j + this._box[i]) % 0x100;
        // swap box[i] and box[j]
        s = box[i];
        box[i] = box[j];
        box[j] = s;
        msg[k] ^= box[(box[i] + box[j]) % 0x100];
        this._i = i;
        this._j = j;
    }
    return msg;
};

RC4.prototype.skip = function (n) {
    var i, j, k, s, box = this._box;
    for (k = 0; k < n; k += 1) {
        i = (this._i + 1) % 0x100;
        j = (this._j + this._box[i]) % 0x100;
        // swap box[i] and box[j]
        s = box[i];
        box[i] = box[j];
        box[j] = s;
        this._i = i;
        this._j = j;
    }
};

util.inherits(RC4Transform, stream.Transform);

function RC4Transform(key) {
    stream.Transform.call(this);
    this._rc4 = new RC4(key);
}

RC4Transform.prototype._transform = function (data, encoding, callback) {
    if (data !== null) {
        this._rc4.update(data);
    }
    callback(null, data);
};

RC4Transform.prototype.skip = function (n) {
    if (n > 0) {
        this._rc4.skip(n);
    }
};

RC4.Transform = RC4Transform;

module.exports = RC4;
